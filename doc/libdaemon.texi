\input texinfo   @c -*-texinfo-*-
@comment $Id: GNU-Sample-Texts.html,v 1.7 2008/09/19 15:44:59 karl Exp $
@comment %**start of header
@setfilename libdaemon.info
@include version.texi
@settitle libdaemon @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for libdaemon, a small and somewhat portable C daemonisation
library that runs under OpenBSD and Linux.

Copyright @copyright{} 2011 Kyle Isom <@email{coder@@kyleisom.net}>

@quotation
This document is released under a dual license. These two licenses are the 
public domain and a Creative Commons Attribution-ShareAlike 3.0 Unported 
License. The purpose of this dual-license is to attribute you, the end user,
to use this documentation for whatever purpose you wish. As such, you, the
end user, are free to select either license at will.

This document is released into the public domain.

This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 
Unported License. To view a copy of this license, visit 
http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative 
Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.
@end quotation
@end copying

@dircategory Texinfo documentation system
@direntry
* introduction: (intro)Introduction to libdaemon
@end direntry

@titlepage
@title libdaemon
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Kyle Isom (@email{coder@@kyleisom.net})
@page
@vskip 0pt plus 1filll
@paragraphindent 0
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top libdaemon

This manual is for libdaemon (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* A Quick Introduction::
* Things You Should Know::
* The Test Suite::
* Manual Copyright::
* Index::
@end menu


@node A Quick Introduction
@chapter A Quick Introduction

@pindex intro
@cindex introduction to @command{libdaemon}

Libdaemon is a minimal and somewhat portable daemonisation library that
works under OpenBSD and Linux. It may also run under FreeBSD and NetBSD,
but this has not been tested.

Libdaemon is distributed with the @code{daemon.h} header which must be included
to make use of the library, as well as linking to @code{libdaemon.a}.

@section Set up and daemonising
The first call to Libdaemon should be a call to @code{init_daemon}. This has
the prototype
@example
int                      init_daemon(char *, uid_t, gid_t);
@end example

The first @code{char *} should be the rundir variable (see ``The run 
directory'') which may be @code{NULL} to have Libdaemon generate a sane 
default. The second and third arguments are the user and group IDs to run as, 
respectively. If set to 0, the value will be the same as the user running the 
daemon. 

@code{init_daemon} returns @code{EXIT_SUCCESS} if all went well, and the 
configuration struct (@code{struct libdaemon_config} in @code{daemon.h}) may
be accessed using @code{daemon_getconfig(void)}. Of note is that a 
@code{struct libdaemon_config} struct has the member @code{char *rundir}, which
may come in handy later. See ``The libdaemon_config struct''.

@section The libdaemon_config struct
The definition for @code{struct libdaemon_config} is this:
@example
struct libdaemon_config @{
        char    *rundir;
        char    *pidfile;
        char    *logfile;
        int      logfd;
        uid_t   run_uid;
        gid_t   run_gid;

@};
@end example

@code{char *rundir} is the run directory the daemon is using (see The run 
directory). This can be used for future calls; for example, the libdaemon core
uses @code{static struct libdaemon_config *cfg}, and passes @code{cfg->rundir}
as the argument to several functions during the initialisation and run phases.

@code{char *pidfile} is the file containing the daemon's PID. The library will
create the file @code{cfg->rundir/__progname.pid}; this value is stored in the
configuration struct for future use (although a call to @code{getpid} could 
also be used).

@code{char *logfile} is the file the daemon logs (as opposed to using the
@code{syslog} interface). Correspondingly, @code{int logfd} is the file
descriptor for the logfile. If syslog is being used, @code{logfile} will be
NULL and @code{logfd} will be -1. Otherwise, they will point to a file on disk
to be used.

@code{uid_t run_uid} and @code{gid_t run_gid} contain the UID and GID the 
daemon was run as, and are used internally for sanity checks. You may use these
or, just as easily, @code{getuid()} or @code{getgid()}.

@section Logging
Libdaemon provides an internal logging framework:

@example
int                      daemon_setlog(char *logfile);
int                      daemon_log(int, char *);
int                      daemon_vlog(int, char *, ...);
@end example

@code{daemon_setlog} is used to open a log file. If one is currently open, it
will be closed first. If the @code{char *} is NULL, the daemon will use the
syslog interface. The function returns @code{EXIT_SUCCESS} if the logfile was
sucessfully opened and any previous open logfiles were successfully closed.

@code{daemon_log} and @code{daemon_vlog} are used to log information to 
@code{logfile}. The @code{int} is the log level to use, which is one of
@code{DAEMON_INFO}, @code{DAEMON_WARN}, @code{DAEMON_ERR}, @code{DAEMON_ALERT}, 
or @code{DAEMON_EMERG}. These are mapped to their @code{LOG_*} equivalents, and 
are provided so your code does not need to include @code{syslog.h}. 
@code{daemon_log} is used to write simple @code{char *} strings to the log,
and @code{daemon_vlog} is used to write more complex (i.e. formatted) log
messages. The first @code{char *} in @code{daemon_vlog} should be the format,
and any following arguments should be those required by the format. 
@code{daemon_vlog} keeps count of the number of arguments passed in and the 
number of conversion specifications (ex. @code{%d}) to make sure the number
of arguments matches the format. Both functions return @code{EXIT_SUCCESS} if
the log was successfully written to, and @code{EXIT_FAILURE} if there was an
error.

@node Things You Should Know
@chapter Things You Should Know
There are a few caveats to using libdaemon.

@section The run directory
The run directory is important to libdaemon as this is where the PID file is
kept and, by default, the base directory for logging. Libdaemon expects that
the all but the lowest layer of the directory exists; for example, given
@code{/var/run/mydaemon}, the library would expect @code{/var/run} to exist.
Similarly, if given @code{/usr/local/var/run/mydaemon}, 
@code{/usr/local/var/run} would be expected to exist.

If the @code{init_daemon} function is called with a @code{NULL} rundir 
argument, it will attempt to best-guess a valid directory to use. The selection
looks like this:

@enumerate
@item If the program is running as root, it is expected to have read / write 
privileges for @code{/var/run} and will use @code{/var/run/__progname} as the
run directory. For example, if the @code{testd} program was run as root, it 
would use @code{/var/run/testd}.

@item If the program is not running as root but has the @code{$@{HOME@}}
environment variable set, it will use @code{$@{HOME@}/.__progname} as the run 
directory. For example, if the @code{testd} program was run as a normal user 
@code{kyle} with the @code{HOME} variable set, it would use 
@code{/home/kyle/.testd}@footnote{This of course assumes that @code{$@{HOME@}} 
expands to @code{/home/kyle}.}.

@item If the program is not running as root and does not have the @code{HOME}
environment variable set, it will use @code{/tmp/__progname} as the run
directory. For example, if the @code{testd} program was run as a normal user
without @code{@{HOME@}} set, it would use @code{/tmp/testd}.
@end enumerate

@section Limitations
Libdaemon is a lightweight library, and as such certain behaviours are not 
supported. Currently known and understood limitations are:

@itemize
@item Because Libdaemon uses a pidfile to check whether it is running or not,
only one instance of Libdaemon can be running at a single time. This is 
currently being looked into and a better way of doing this is being evaluated.
@end itemize

@node The Test Suite
@chapter The Test Suite

@section testcore
@code{testcore} is a binary to test the functionality in core.c; it is probably
of little use to anyone but the @code{Libdaemon} maintainers.

@section @code{testd}
@code{testd} is a test daemon to verify the @code{Libdaemon} library works. It
is build via @code{make check} and is found in @code{src/testd}. When invoked,
it simply daemonises, and wakes up every minute to check the load average. If
the load average is above a certain level, it will write a log message warning
about the load average. Otherwise, it just notes that it woke up. As with any
daemon built using the @code{Libdaemon} library, the proper way to shut it down
is to send it the signal @code{SIGUSR1}. It will log when it is shutting down.

The source for @code{testd} illustrates how the library works and can be used
in your code. The test daemon source is at @code{src/testd.c}.
@node Manual Copyright
@appendix Manual Copyright

@include cc.texi

@node Index
@unnumbered Index

@printindex cp

@bye
